package _137_single_number_ii

/**
https://leetcode.com/problems/single-number-ii/


给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。

说明：

你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？

*/

/*
*

	解题思路

& 两者同时为真才为真

0010 0100
&
0010 0100
=
0010 0100

由以上可得知，相同数字做&运算，会得到相同的数字。

| 两者一者为真就为真

0010 0100
|
0010 0100
=
0010 0100

由以上可得知，相同数字做|运算，会得到相同的数字。

^ 相同为假，不同为真

0010 0100
^
0010 0100
=
0000 0000

由以上可得知，相同数字做^异或运算，会得到0。

由此延伸到题目中，可以得知，若存在一个数字只出现一次，那么该数组所有元素异或结果大于0.
*/
func singleNumberTwo(nums []int) int {
	res := 0
	for _, j := range nums {
		res ^= j
	}

	return res
}

/**

 给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现三次。找出那个只出现了一次的元素。

说明：

你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？
*/

func singleNumber(nums []int) int {
	ones, twos := 0, 0
	for i := 0; i < len(nums); i++ {
		ones = (ones ^ nums[i]) & ^twos
		twos = (twos ^ nums[i]) & ^ones
	}
	return ones
}
